// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id                  Int                         @id @default(autoincrement())
  name                String?
  email               String?                     @unique
  emailVerified       DateTime?                   @map(name: "email_verified")
  image               String?
  createdAt           DateTime                    @default(now()) @map(name: "created_at")
  updatedAt           DateTime                    @default(now()) @map(name: "updated_at")
  productAccessTokens ProductAccessToken[]
  stripeCustomer      UserStripeCustomerRelation?

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

enum ProductType {
  classic
  pre_order
  // membership TODO: 定期課金

  @@map(name: "product_type")
}

model Product {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String
  amount              Int
  stripeProductId     String               @unique @map(name: "stripe_proruct_id")
  productType         ProductType          @map(name: "product_type")
  productAccessTokens ProductAccessToken[]
  coverUrl            String

  @@map(name: "products")
}

model ProductAccessToken {
  id                    Int      @id @default(autoincrement())
  user                  User     @relation(fields: [userId], references: [id])
  userId                Int      @map(name: "user_id")
  product               Product  @relation(fields: [productId], references: [id])
  productId             Int      @map(name: "product_id")
  stripeCheckoutId      String   @unique
  stripePaymentIntentId String   @unique
  createdAt             DateTime @default(now()) @map(name: "created_at")

  @@unique([userId, productId])
  @@map("product_access_tokens")
}

model UserStripeCustomerRelation {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int      @map(name: "user_id")
  stripeCustomerId String   @map(name: "stripe_customer_id")
  createdAt        DateTime @default(now()) @map(name: "created_at")

  @@map("user_stripe_customer_relations")
}
